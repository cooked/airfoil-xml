/**
 */
package com.stefanocottafavi.airfoil.provider;

import com.stefanocottafavi.airfoil.util.AirfoilAdapterFactory;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class AirfoilItemProviderAdapterFactory extends AirfoilAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public AirfoilItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.stefanocottafavi.airfoil.AerodynamicsType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AerodynamicsTypeItemProvider aerodynamicsTypeItemProvider;

	/**
	 * This creates an adapter for a {@link com.stefanocottafavi.airfoil.AerodynamicsType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAerodynamicsTypeAdapter() {
		if (aerodynamicsTypeItemProvider == null) {
			aerodynamicsTypeItemProvider = new AerodynamicsTypeItemProvider(this);
		}

		return aerodynamicsTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.stefanocottafavi.airfoil.AirfoilType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AirfoilTypeItemProvider airfoilTypeItemProvider;

	/**
	 * This creates an adapter for a {@link com.stefanocottafavi.airfoil.AirfoilType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAirfoilTypeAdapter() {
		if (airfoilTypeItemProvider == null) {
			airfoilTypeItemProvider = new AirfoilTypeItemProvider(this);
		}

		return airfoilTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.stefanocottafavi.airfoil.CoordinatesType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CoordinatesTypeItemProvider coordinatesTypeItemProvider;

	/**
	 * This creates an adapter for a {@link com.stefanocottafavi.airfoil.CoordinatesType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCoordinatesTypeAdapter() {
		if (coordinatesTypeItemProvider == null) {
			coordinatesTypeItemProvider = new CoordinatesTypeItemProvider(this);
		}

		return coordinatesTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.stefanocottafavi.airfoil.DataType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DataTypeItemProvider dataTypeItemProvider;

	/**
	 * This creates an adapter for a {@link com.stefanocottafavi.airfoil.DataType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDataTypeAdapter() {
		if (dataTypeItemProvider == null) {
			dataTypeItemProvider = new DataTypeItemProvider(this);
		}

		return dataTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.stefanocottafavi.airfoil.DocumentRoot} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DocumentRootItemProvider documentRootItemProvider;

	/**
	 * This creates an adapter for a {@link com.stefanocottafavi.airfoil.DocumentRoot}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDocumentRootAdapter() {
		if (documentRootItemProvider == null) {
			documentRootItemProvider = new DocumentRootItemProvider(this);
		}

		return documentRootItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.stefanocottafavi.airfoil.ElementsType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ElementsTypeItemProvider elementsTypeItemProvider;

	/**
	 * This creates an adapter for a {@link com.stefanocottafavi.airfoil.ElementsType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createElementsTypeAdapter() {
		if (elementsTypeItemProvider == null) {
			elementsTypeItemProvider = new ElementsTypeItemProvider(this);
		}

		return elementsTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.stefanocottafavi.airfoil.ElementType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ElementTypeItemProvider elementTypeItemProvider;

	/**
	 * This creates an adapter for a {@link com.stefanocottafavi.airfoil.ElementType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createElementTypeAdapter() {
		if (elementTypeItemProvider == null) {
			elementTypeItemProvider = new ElementTypeItemProvider(this);
		}

		return elementTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.stefanocottafavi.airfoil.ParametersType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ParametersTypeItemProvider parametersTypeItemProvider;

	/**
	 * This creates an adapter for a {@link com.stefanocottafavi.airfoil.ParametersType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createParametersTypeAdapter() {
		if (parametersTypeItemProvider == null) {
			parametersTypeItemProvider = new ParametersTypeItemProvider(this);
		}

		return parametersTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.stefanocottafavi.airfoil.ParameterType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ParameterTypeItemProvider parameterTypeItemProvider;

	/**
	 * This creates an adapter for a {@link com.stefanocottafavi.airfoil.ParameterType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createParameterTypeAdapter() {
		if (parameterTypeItemProvider == null) {
			parameterTypeItemProvider = new ParameterTypeItemProvider(this);
		}

		return parameterTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.stefanocottafavi.airfoil.PointType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PointTypeItemProvider pointTypeItemProvider;

	/**
	 * This creates an adapter for a {@link com.stefanocottafavi.airfoil.PointType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPointTypeAdapter() {
		if (pointTypeItemProvider == null) {
			pointTypeItemProvider = new PointTypeItemProvider(this);
		}

		return pointTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.stefanocottafavi.airfoil.RotationType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RotationTypeItemProvider rotationTypeItemProvider;

	/**
	 * This creates an adapter for a {@link com.stefanocottafavi.airfoil.RotationType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRotationTypeAdapter() {
		if (rotationTypeItemProvider == null) {
			rotationTypeItemProvider = new RotationTypeItemProvider(this);
		}

		return rotationTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.stefanocottafavi.airfoil.ScalingType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ScalingTypeItemProvider scalingTypeItemProvider;

	/**
	 * This creates an adapter for a {@link com.stefanocottafavi.airfoil.ScalingType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createScalingTypeAdapter() {
		if (scalingTypeItemProvider == null) {
			scalingTypeItemProvider = new ScalingTypeItemProvider(this);
		}

		return scalingTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.stefanocottafavi.airfoil.TablesType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TablesTypeItemProvider tablesTypeItemProvider;

	/**
	 * This creates an adapter for a {@link com.stefanocottafavi.airfoil.TablesType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTablesTypeAdapter() {
		if (tablesTypeItemProvider == null) {
			tablesTypeItemProvider = new TablesTypeItemProvider(this);
		}

		return tablesTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.stefanocottafavi.airfoil.TableType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TableTypeItemProvider tableTypeItemProvider;

	/**
	 * This creates an adapter for a {@link com.stefanocottafavi.airfoil.TableType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTableTypeAdapter() {
		if (tableTypeItemProvider == null) {
			tableTypeItemProvider = new TableTypeItemProvider(this);
		}

		return tableTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.stefanocottafavi.airfoil.TransformationType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TransformationTypeItemProvider transformationTypeItemProvider;

	/**
	 * This creates an adapter for a {@link com.stefanocottafavi.airfoil.TransformationType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTransformationTypeAdapter() {
		if (transformationTypeItemProvider == null) {
			transformationTypeItemProvider = new TransformationTypeItemProvider(this);
		}

		return transformationTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.stefanocottafavi.airfoil.TranslationType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TranslationTypeItemProvider translationTypeItemProvider;

	/**
	 * This creates an adapter for a {@link com.stefanocottafavi.airfoil.TranslationType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTranslationTypeAdapter() {
		if (translationTypeItemProvider == null) {
			translationTypeItemProvider = new TranslationTypeItemProvider(this);
		}

		return translationTypeItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (aerodynamicsTypeItemProvider != null) aerodynamicsTypeItemProvider.dispose();
		if (airfoilTypeItemProvider != null) airfoilTypeItemProvider.dispose();
		if (coordinatesTypeItemProvider != null) coordinatesTypeItemProvider.dispose();
		if (dataTypeItemProvider != null) dataTypeItemProvider.dispose();
		if (documentRootItemProvider != null) documentRootItemProvider.dispose();
		if (elementsTypeItemProvider != null) elementsTypeItemProvider.dispose();
		if (elementTypeItemProvider != null) elementTypeItemProvider.dispose();
		if (parametersTypeItemProvider != null) parametersTypeItemProvider.dispose();
		if (parameterTypeItemProvider != null) parameterTypeItemProvider.dispose();
		if (pointTypeItemProvider != null) pointTypeItemProvider.dispose();
		if (rotationTypeItemProvider != null) rotationTypeItemProvider.dispose();
		if (scalingTypeItemProvider != null) scalingTypeItemProvider.dispose();
		if (tablesTypeItemProvider != null) tablesTypeItemProvider.dispose();
		if (tableTypeItemProvider != null) tableTypeItemProvider.dispose();
		if (transformationTypeItemProvider != null) transformationTypeItemProvider.dispose();
		if (translationTypeItemProvider != null) translationTypeItemProvider.dispose();
	}

}
